
#pragma once

#include <macgyver/CsvReader.h>
#include <newbase/NFmiEnumConverter.h>
#include <list>
#include <map>
#include <string>
#include <vector>

#define DEBUG_PRINT 0
#define POLAR_STEREOGRAPHIC "polar_stereographic"
#define LAMBERT_CONFORMAL_CONIC "lambert_conformal_conic"
#define LATITUDE_LONGITUDE "latitude_longitude"
#define LAMBERT_AZIMUTHAL "lambert_azimuthal_equal_area"

class NFmiFastQueryInfo;

namespace nctools
{
typedef std::map<std::string, std::string> attributesMap;
// ----------------------------------------------------------------------
/*!
 * \brief Container for command line options
 */
// ----------------------------------------------------------------------

struct Options
{
  Options();

  bool verbose;                      // -v
  std::vector<std::string> infiles;  // Multiple input files
  std::string outfile;               // -o
  std::string configfile;            // -c Config, replace standard config
  std::vector<std::string> configs;  // -C extra configs, take precedence over standard
  std::string producername;          // --producername
  long producernumber;               // --producernumber
  long timeshift;                    // -t <minutes>
  bool memorymap;                    // --mmap
  bool fixstaggered;  // -s (muuttaa staggered datat perusdatan muotoon, interpoloi datan perus
                      // hilaan)
  bool experimental;  // -x enable features which are known to be not work in all situations
  bool debug;         // -d enable debugging output
  bool autoid;        // -U --autoids use autogenerated ids for unknown parameters
  std::vector<std::string> parameters;            // Define extra parameters on command line
  std::list<std::string> ignoreUnitChangeParams;  // -u name1,name2,...
  std::list<std::string> excludeParams;           // -x name1,name2,...
  std::string projection;  // -P // data konvertoidaan haluttuun projektioon ja alueeseen
  attributesMap cmdLineGlobalAttributes;  // -a optiolla voidaan antaa dataan liittyvi� globaali
                                          // attribuutteja (esim. -a DX=1356.3;DY=1265.3)
};

// ----------------------------------------------------------------------
/*!
 * \brief List of parameter conversions from NetCDF to newbase
 */
// ----------------------------------------------------------------------

typedef std::list<Fmi::CsvReader::row_type> ParamConversions;

struct CsvParams
{
  ParamConversions paramconvs;
  const Options &options;

  CsvParams(const Options &optionsIn);
  void add(const Fmi::CsvReader::row_type &row);

 private:
  CsvParams &operator=(const CsvParams &);  // estet��n sijoitus opereraattori, est�� varoituksen
                                            // VC++ 2012 k��nt�j�ss�
};

// ----------------------------------------------------------------------
/*!
 * \brief Parameter parsing info
 *
 * This structure is used for identifying parameters consisting of
 * X- and Y-components which should be converted into a speed
 * and direction variable.
 */
// ----------------------------------------------------------------------

struct ParamInfo
{
  FmiParameterName id;
  bool isregular;
  bool isspeed;
  std::string x_component;
  std::string y_component;
  std::string name;

  ParamInfo()
      : id(kFmiBadParameter), isregular(true), isspeed(false), x_component(), y_component(), name()
  {
  }
};

extern int unknownParIdCounterBegin;  // Beginning of unknown ids

NFmiEnumConverter &get_enumconverter(void);
ParamInfo parse_parameter(const std::string &name,
                          const ParamConversions &paramconvs,
                          bool useAutoGeneratedIds);
bool parse_options(int argc, char *argv[], Options &options);
ParamConversions read_netcdf_configs(const Options &options);
bool is_name_in_list(const std::list<std::string> &nameList, const std::string name);

#if DEBUG_PRINT
void print_att(const NcAtt &att);
void debug_output(const NcFile &ncfile);
#endif

}  // namespace nctools
