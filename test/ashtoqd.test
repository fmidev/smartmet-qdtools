#!/usr/bin/perl

$program = (-x "../ashtoqd" ? "../ashtoqd" : "ashtoqd");

$results = "results";

%usednames = ();

DoTest("concentration",
       "concentration",
       "data/volcano");

DoTest("boundaries",
       "boundaries",
       "-b data/volcano");

print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my($resultfile) = "ashtoqd_$name";
    my($tmpfile) = "${resultfile}.tmp";
    $cmd = "$program $arguments $results/$tmpfile";
    
    # print "$cmd\n";
    $output = `$cmd`;

    print padname($text);

    my($difference) = `../qddifference results/$resultfile results/$tmpfile`;
    $difference =~ s/^\s+//;
    $difference =~ s/\s+$//;

    if($difference < 0.0001)
    {
	if($difference <= 0)
	{ print " OK\n"; }
	else
	{ print " OK (diff <= $difference)\n"; }
	unlink("$results/$tmpfile");
    }
    else
    {
	print " FAILED! (maxdiff = $difference)\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file1,$file2) = @_;

    # Files must exits

    if(!(-e $file1)) { return 0; }
    if(!(-e $file2)) { return 0; }

    # Read binary file and compare results

    open(FILE1,"$file1");
    binmode(FILE1);
    read(FILE1,$buffer1,(stat(FILE1))[7]);
    close(FILE1);

    open(FILE2,"$file2");
    binmode(FILE2);
    read(FILE2,$buffer2,(stat(FILE2))[7]);
    close(FILE2);

    return ($buffer1 eq $buffer2);
}

# ----------------------------------------------------------------------
