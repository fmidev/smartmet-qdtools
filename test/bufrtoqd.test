#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../bufrtoqd" ? "../bufrtoqd" : "bufrtoqd");

my $errors = 0;

my $results = "results";

my %usednames = ();

DoTest("buoy observations",
       "buoy.sqd",
       "-c ../cnf/bufr.conf -s ../cnf/stations.csv data/buoy.bufr");

DoTest("land observations",
       "land.sqd",
       "-c ../cnf/bufr.conf -s ../cnf/stations.csv data/land.bufr");

DoTest("airplane (AMDAR) observations",
       "amdar.sqd",
       "--usebufrname -c ../cnf/bufr.conf -s ../cnf/stations.csv data/amdar.bufr");

DoTest("soundings",
       "sounding.sqd",
       "-c ../cnf/bufr.conf -s ../cnf/stations.csv data/sounding.bufr");

print "$errors errors\n";
exit($errors);


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult($results, "bufrtoqd_$name");
    my $tmpfile = RemoveCompressionExt($resultfile) . ".tmp";
    my $cmd = "$program $arguments $tmpfile";

    #print "$cmd\n";
    my $bufrtoqd_failed = 0;
    my $ret = system("$cmd >$results/$name.out 2>&1");
    if ($ret != 0) {
        $bufrtoqd_failed = 1;
    }

    print padname($text);

    if ($bufrtoqd_failed) {
	++$errors;
        print " FAILED (return code $ret from bufrtoqd)\n";
        print "\n";
        system("head -15 $results/$name.out");
    } else {
        unlink("$results/$name.out");

        my ($ok, $msg) = CheckQuerydataEqual($resultfile, $tmpfile, 0.0001);
        print " $msg\n";
        if (!$ok) {
            ++$errors;
        }
    }
}

# ----------------------------------------------------------------------

