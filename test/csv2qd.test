#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../csv2qd" ? "../csv2qd" : "csv2qd");

my $errors = 0;

my $results = "results";
my $common = "-S conf/stations.csv -P ../cnf/parameters.csv";

my %usednames = ();

DoTest("synop data",
       "synop_plain",
       "$common -p Temperature,WindSpeedMS,Precipitation1h data/synop.csv");

DoTest("synop data with timezone",
       "synop_timezone",
       "$common -p Temperature,WindSpeedMS,Precipitation1h -t Europe/Helsinki data/synop.csv");

DoTest("synop 2 files",
       "synop_2files",
       "$common -p Temperature,WindSpeedMS,Precipitation1h data/synop1.csv data/synop2.csv");

DoTest("synop data with -O timeid",
       "synop_reverse",
       "$common -O timeid -p Temperature,WindSpeedMS,Precipitation1h data/reversesynop.csv");

DoTest("synop data with -m NULL",
       "synop_missing",
       "$common -m NULL -p Temperature,WindSpeedMS,Precipitation1h data/nullsynop.csv");

DoTest("road1h data with -S",
       "road1h_plain",
       "-S conf/roadstations.csv -P ../cnf/parameters.csv -p Temperature,WindSpeedMS data/road1h.csv");

DoTest("road1h data with -S --allstations",
       "road1h_allstations",
       "-S conf/roadstations.csv -P ../cnf/parameters.csv --allstations -p Temperature,WindSpeedMS data/road1h.csv");

DoTest("sounding data with -O idtimelevel",
       "sounding_idtimelevel",
       "$common -m NULL -O idtimelevel -p GeopHeight,Temperature,Pressure data/soundings_idtimelevel.csv");

DoTest("sounding data with -O idleveltime",
       "sounding_idleveltime",
       "$common -m NULL -O idleveltime -p GeopHeight,Temperature,Pressure data/soundings_idleveltime.csv");

DoTest("sounding data with -O timeidlevel",
       "sounding_timeidlevel",
       "$common -m NULL -O timeidlevel -p GeopHeight,Temperature,Pressure data/soundings_timeidlevel.csv");

DoTest("sounding data with -O timelevelid",
       "sounding_timelevelid",
       "$common -m NULL -O timelevelid -p GeopHeight,Temperature,Pressure data/soundings_timelevelid.csv");

DoTest("sounding data with -O levelidtime",
       "sounding_levelidtime",
       "$common -m NULL -O levelidtime -p GeopHeight,Temperature,Pressure data/soundings_levelidtime.csv");

DoTest("sounding data with -O leveltimeid",
       "sounding_leveltimeid",
       "$common -m NULL -O leveltimeid -p GeopHeight,Temperature,Pressure data/soundings_leveltimeid.csv");


print "$errors errors\n";
exit($errors);


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult("$results", "csv2qd_$name");
    my $tmpfile = RemoveCompressionExt($resultfile) . ".tmp";

    my $cmd = "$program $arguments $tmpfile";

    # print "$cmd\n";
    my $output = `$cmd 2>&1`;
    my $ret = $?;

    print padname($text);

    if ($ret != 0) {
	++$errors;
        print " FAILED: return code $ret from '$cmd'\n";
        print "\n";
        print "$output\n";
    } else {
        my ($ok, $msg) = CheckQuerydataEqual($resultfile, $tmpfile, 0.0001);
        print " $msg\n";
        if ($ok) {
            unlink $tmpfile;
        } else {
            ++$errors;
        }
    }
}

# ----------------------------------------------------------------------
