#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../flash2qd" ? "../flash2qd" : "flash2qd");

my $results = "results";

my $errors = 0;

my %usednames = ();

DoTest("flash","flash","data/flash.txt","flash.sqd");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments,$resultfile) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $cmd = "$program $arguments";

    # print "$cmd\n";
    # $output = `$cmd 2>/dev/null`;
    my $output = system("$cmd >$results/$resultfile");
    my $ret = $?;
    if ($ret != 0) {
        ++$errors;
        print " FAILED: return code $ret from '$cmd'\n" ;
        return;
    }

    print padname($text);

    if(! -e "results/$resultfile")
    {
	++$errors;
	print " FAILED TO PRODUCE OUTPUT FILE results/$resultfile\n";
    }
    elsif(! -e "results/${resultfile}.ok")
    {
	++$errors;
	print " FAILED: TRUE RESULT results/${resultfile}.ok MISSING\n";
	# unlink("$results/$resultfile");
    }
    else
    {
        my ($ok, $msg) = CheckQuerydataEqual(
            "results/$resultfile.ok",
            "results/$resultfile",
            0.0001);
        print " $msg\n";
        if (!$ok) {
            ++$errors;
        }
    }
}

