#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../h5toqd" ? "../h5toqd" : "h5toqd");

my $results = "results/hdf";
system("mkdir -p $results");

my $errors = 0;

my %usednames = ();

DoTest("daily precipitation","daily.sqd","daily.h5");
DoTest("dbz","dbz.sqd","dbz.h5");
DoTest("echo top","etop.sqd","etop.h5");
DoTest("max","max.sqd","max.h5");
DoTest("pac","pac.sqd","pac.h5");
DoTest("ppi","ppi.sqd","ppi.h5");
DoTest("vil","vil.sqd","vil.h5");
DoTest("rr3h","3h.sqd","3h.h5");
DoTest("cappi","cappi.sqd","cappi.h5");
DoTest("pvol","pvol.sqd","pvol.h5");

# Not Opera parameters:
# DoTest("zhail","zhail.sqd","zhail.h5");
# DoTest("lmr","lmr.sqd","lmr.h5");
# DoTest("ltb","ltb.sqd","ltb.h5");
# DoTest("smv","smv.sqd","smv.h5");
# DoTest("sri","sri.sqd","sri.h5");
# DoTest("srv","srv.sqd","srv.h5");
# DoTest("hshear","hshear.sqd","hshear.h5");
# DoTest("vshear","vshear.sqd","vshear.h5");
# DoTest("shear","shear.sqd","shear.h5");
# DoTest("shear2","shear2.sqd","shear2.h5");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$infile) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult("results/hdf", $name);
    my $tmpfile = RemoveCompressionExt($resultfile) . ".tmp";

    my @cleanup;
    my $input = FindFile("data/hdf", $infile);
    if ($input ne $infile) {
        push(@cleanup, "data/hdf/$infile");
        Unpack("data/hdf/$input", "data/hdf/$infile");
    }

    my $cmd = "$program data/hdf/$infile $tmpfile";

    print "$cmd\n";
    # $output = `$cmd 2>/dev/null`;
    my $output = `$cmd`;
    my $ret = $?;

    print padname($text);

    if ($ret != 0) {
        ++$errors;
        print " FAILED: return code $ret from '$cmd'\n";
    } elsif(! -e "$tmpfile")
    {
	++$errors;
	print " FAILED TO PRODUCE OUTPUT FILE\n";
    }
    elsif(! -e "$resultfile")
    {
	++$errors;
	print " FAILED: TRUE RESULT MISSING\n";
    }
    else
    {
        my ($ok, $msg) = CheckQuerydataEqual(
            "$resultfile",
            "$tmpfile",
            0.0001);
        print " $msg\n";
        if (!$ok) {
            ++$errors;
        }
    }
}

# ----------------------------------------------------------------------
