#!/usr/bin/perl

$program = (-x "../h5toqd" ? "../h5toqd" : "h5toqd");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
$wgs84 = 1-($? >> 8);

$results = "results/hdf";
$resultsexpected = "results";
system("mkdir -p $results");

%usednames = ();

DoTest("daily precipitation","daily.sqd","daily.h5");
DoTest("dbz","dbz.sqd","dbz.h5");
DoTest("echo top","etop.sqd","etop.h5");
DoTest("max","max.sqd","max.h5");
DoTest("pac","pac.sqd","pac.h5");
DoTest("ppi","ppi.sqd","ppi.h5");
DoTest("vil","vil.sqd","vil.h5");
DoTest("rr3h","3h.sqd","3h.h5");
DoTest("cappi","cappi.sqd","cappi.h5");
DoTest("pvol","pvol.sqd","pvol.h5");

# Uses an unsupported projection
DoTest("comp","comp.sqd","comp.h5");

# Not Opera parameters:
# DoTest("zhail","zhail.sqd","zhail.h5");
# DoTest("lmr","lmr.sqd","lmr.h5");
# DoTest("ltb","ltb.sqd","ltb.h5");
# DoTest("smv","smv.sqd","smv.h5");
# DoTest("sri","sri.sqd","sri.h5");
# DoTest("srv","srv.sqd","srv.h5");
# DoTest("hshear","hshear.sqd","hshear.h5");
# DoTest("vshear","vshear.sqd","vshear.h5");
# DoTest("shear","shear.sqd","shear.h5");
# DoTest("shear2","shear2.sqd","shear2.h5");

print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$infile) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my($resultfile) = "h5toqd_" . "$name";

    if($wgs84)
    {
	my($wgs84resultfile) = "${resultfile}.wgs84";
	if(-e "$results/$wgs84resultfile")
	{  $resultfile = $wgs84resultfile; }
    }

    my($tmpfile) = "${resultfile}.tmp";
    $cmd = "$program data/hdf/$infile $results/$tmpfile";
    
    # print "$cmd\n";
    # $output = `$cmd 2>/dev/null`;
    $output = `$cmd`;

    print padname($text);

    if(! -e "$results/$tmpfile")
    {
	print " FAILED TO PRODUCE OUTPUT FILE\n";
    }
    elsif(! -e "$resultsexpected/$resultfile")
    {
	print " FAILED: TRUE RESULT MISSING ($resultsexpected/$resultfile)\n";
	unlink("$results/$tmpfile");
    }
    else
    {
	my($difference) = `../qddifference $resultsexpected/$resultfile $results/$tmpfile`;

	$difference =~ s/^\s+//;
	$difference =~ s/\s+$//;
	
	if($difference < 0.0001)
	{
	    if($difference <= 0)
	    { print " OK\n"; }
	    else
	    { print " OK (diff <= $difference)\n"; }
	    unlink("$results/$tmpfile");
	}
	else
	{
	    print " FAILED! (maxdiff = $difference)\n";
	    print "( $resultfile <> $tmpfile in $results/ )\n";
	}
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
