#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../nctoqd" ? "../nctoqd" : "nctoqd");
my $qdinfo = (-x "../qdinfo" ? "../qdinfo" : "qdinfo");
my $qddifference = (-x "../qddifference" ? "../qddifference" : "qddifference");

my $results = "results";

my $errors = 0;

my %usednames = ();

MaybeUnpackFile("data/netcdf", "vietnam.nc");

my $dir = $0;
$dir =~ s%[^/]*$%%;
if ($dir) { chdir "$dir" or die "Unable to change to $dir: $!" }

# Keep temporaries: useful to produce new result files
my $keeptmp = "";
my $cmp     = "";
while ( scalar @ARGV > 0 ) {
	if ( $ARGV[0] eq "keeptmp" ) {
		$keeptmp = "yes";
		print "Keeping temporary files.\n";
	}
	if ( $ARGV[0] eq "cmp" ) {
		$cmp = "yes";
		print "Using system cmp instead of qddifference.\n";
	}
	shift @ARGV;
}

my @inputs = glob "data/netcdf/*.nc";
foreach my $input (@inputs) {
	my $output = $input;
	$output =~ s%^data/netcdf/%%;
	$output =~ s%[.]nc$%.sqd%;
	my $name = $output;
	$name =~ s%[.]sqd%%;
	if ( $input =~ m/(T[0-9]+)[.]/ ) {
		DoTest( "$name", "$output", "-U -" . $1 . " -c ../cnf/netcdf.conf $input" );
	}
	elsif ( $input =~ m/vietnam/ ) {
		DoTest( "$name", "$output", " -c conf/netcdf_vietnam.conf $input" );
	}
	elsif ( $input =~ m/aquamar/ ) {
		DoTest( "$name", "$output", " --zdim Z21_21 -c conf/netcdf_aquamar.conf $input" );
	}
	else {
		DoTest( "$name", "$output", "-c ../cnf/netcdf.conf $input" );
	}
}

DoTest( "vietnam_lev", "vietnam_lev.sqd", "-c conf/netcdf_vietnam.conf --zdim lev data/netcdf/vietnam.nc");
DoTest( "vietnam_soil", "vietnam_soil.sqd", "-c conf/netcdf_vietnam.conf --zdim lev_soil data/netcdf/vietnam.nc");
DoTest( "vietnam_topo", "vietnam_topo.sqd", "-c conf/netcdf_vietnam.conf --tdim '' data/netcdf/vietnam.nc");
DoTest( "merge", "merge.sqd", "-c ../cnf/netcdf.conf " . join( ' ', sort glob "data/netcdf/*.merge-nc" ) );
DoTest( "fixid", "fixid.sqd", "-m sm_uncertainty,15000 -c ../cnf/netcdf.conf data/netcdf/C3S-SOILMOISTURE-L3S-SSMV-PASSIVE-DAILY-20160831000000-TCDR-v201706.0.0.nc" );
DoTest( "unknownids", "unknownids.sqd", "-U -c ../cnf/netcdf.conf data/netcdf/C3S-SOILMOISTURE-L3S-SSMV-PASSIVE-DAILY-20160831000000-TCDR-v201706.0.0.nc" );

print "$errors errors\n";
exit($errors);


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest {
    my ( $text, $name, $arguments ) = @_;

    if ( exists( $usednames{$name} ) ) {
        print "Error: $name used more than once\n";
        exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult("results", "nctoqd_$name");
    my $tmpfile = RemoveCompressionExt($resultfile) . ".tmp";

    my $cmd = "$program $arguments $tmpfile";

    if ( "$text" =~ m/^merge/ ) {
        $cmd = "$program -o $tmpfile $arguments";
    }

    my $retcode = system("$cmd >results/$name.out 2>&1");
    if ( $retcode != 0 ) {
        system("tail -10 results/$name.out") ;
        print "Failed to run $cmd: $!";
        ++$errors;
        return;
    }
    unlink("results/$name.out");

    print padname($text);

    if ( !-e $tmpfile ) {
        ++$errors;
        print " FAILED TO PRODUCE OUTPUT FILE\n";
    }
    elsif ( ! defined $resultfile ) {
        ++$errors;
        print " FAILED: TRUE RESULT MISSING\n";
        if ( !$keeptmp ) { unlink($tmpfile); }
    }
    else {
        if ($cmp) {
            my $cmp = EqualFiles($resultfile, $tmpfile);
            if (!$cmp ) {
                ++$errors;
                print $cmp ;
                print " FAILED!";
            }
            else {
                print " ok\n";
                if ( !$keeptmp ) { unlink("$$tmpfile"); }
            }
        }
        else {
            my ($difference) = `$qddifference $resultfile $tmpfile`;
            my $ret = $?;
            if ( $ret != 0 ) {
                ++$errors;
                print " FAILED!\nqddifference says:\n$difference";
                print "( $resultfile <> $tmpfile in $results/ )\n";
            }
            else {
                $difference =~ s/^\s+//;
                $difference =~ s/\s+$//;

                if ( $difference < 0.0001 ) {
                    if   ( $difference <= 0 ) { print " ok\n"; }
                    else                      { print " ok (diff <= $difference)\n"; }

                    # Test with qdinfo as well
                    print padname($text);
                    my $qdinfo1 = `$qdinfo -a -q $resultfile > $resultfile.qdinfo`;
                    my $ret1    = $?;
                    if ( $ret1 != 0 ) {
                        ++$errors;
                        print " FAILED!\nqdinfo failed on original result file\n";
                    }
                    else {
                        my $qdinfo2 = `$qdinfo -a -q $tmpfile > $tmpfile.qdinfo`;
                        my $ret2    = $?;
                        if ( $ret2 != 0 ) {
                            ++$errors;
                            print " FAILED!\nqdinfo failed on generated test file\n";
                        }
                        else {
                            my $qddiff = `diff --unified $resultfile.qdinfo $tmpfile.qdinfo`;
                            my $ret3   = $?;
                            if ( $ret3 != 0 ) {
                                ++$errors;
                                print " FAILED!\nquerydata header mismatch\n$qddiff";
                            }
                            else {
                                print " metadata match ok\n";
                                if ( !$keeptmp ) {
                                    unlink("$results/$tmpfile");
                                    unlink("$results/$resultfile.qdinfo");
                                    unlink("$results/$tmpfile.qdinfo");
                                }
                            }
                        }
                    }
                }
                else {
                    ++$errors;
                    print " FAILED! (maxdiff = $difference)\n";
                    print "( $resultfile <> $tmpfile in $results/ )\n";
                }
            }

        }
    }
}
