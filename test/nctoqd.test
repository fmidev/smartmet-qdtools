#!/usr/bin/perl

$program = "../nctoqd";
$results = "results";

%usednames = ();

# Keep temporaries: useful to produce new result files
$keeptmp = "";
if ( scalar @ARGV > 0 && $ARGV[0] eq "keeptmp" ) {
	$keeptmp = "yes";
	print "Keeping temporary files\n";
}

foreach my $input ( glob "data/*.nc" ) {
	my $output = $input;
	$output =~ s%^data/%%;
	$output =~ s%[.]nc$%.sqd%;
	my $name = $output;
	$name =~ s%[.]sqd%%;
	DoTest( "$name", "$output", "-c ../cnf/netcdf.conf $input" );
}

print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest {
	my ( $text, $name, $arguments ) = @_;

	if ( exists( $usednames{$name} ) ) {
		print "Error: $name used more than once\n";
		exit(1);
	}
	$usednames{$name} = 1;

	my ($resultfile) = "nctoqd_$name";
	my ($tmpfile) = "${resultfile}.tmp";
	$cmd = "$program $arguments $results/$tmpfile";

	# print "$cmd\n";
	# $output = `$cmd 2>/dev/null`;
	$output = `$cmd`;

	print padname($text);

	if ( !-e "results/$tmpfile" ) {
		print " FAILED TO PRODUCE OUTPUT FILE\n";
	}
	elsif ( !-e "results/$resultfile" ) {
		print " FAILED: TRUE RESULT MISSING\n";
		if ( !$keeptmp ) { unlink("$results/$tmpfile"); }
	}
	else {
		my ($difference) =
		  `../qddifference results/$resultfile results/$tmpfile`;

		$difference =~ s/^\s+//;
		$difference =~ s/\s+$//;

		if ( $difference < 0.0001 ) {
			if   ( $difference <= 0 ) { print " OK\n"; }
			else                      { print " OK (diff <= $difference)\n"; }
			if ( !$keeptmp ) { unlink("$results/$tmpfile"); }
		}
		else {
			print " FAILED! (maxdiff = $difference)\n";
			print "( $resultfile <> $tmpfile in $results/ )\n";
		}
	}
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname {
	my ($str) = @_[0];

	while ( length($str) < 70 ) {
		$str .= ".";
	}
	return $str;
}

# ----------------------------------------------------------------------
