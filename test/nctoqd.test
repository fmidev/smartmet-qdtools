#!/usr/bin/perl

$program = (-x "../nctoqd" ? "../nctoqd" : "nctoqd");
$qdinfo = (-x "../qdinfo" ? "../qdinfo" : "qdinfo");
$qddifference = (-x "../qddifference" ? "../qddifference" : "qddifference");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
$wgs84 = 1-($? >> 8);

$results = "results";

$errors = 0;

%usednames = ();

sub FindFile($$)
{
    my $dir = shift;
    my $name = shift;
    my $result;
    if (-e "$dir/$name.xz") {
        $result="$name.xz";
    } elsif (-e "$dir/$name.bz2") {
        $result="$name.bz2"
    } elsif (-e "$dir/$name.gz") {
        $result="$name.gz"
    } elsif (-e "$dir/$name.zstd") {
        $result="$name.zstd"
    } elsif (-e "$dir/$name") {
        $result=$name;
    }
    return $result;
}

sub RemoveCompressionExt($)
{
    my $x = shift;
    $x =~ s/.(gz|bz2|xz|zstd)$//;
    return $x;
}

sub Unpack($)
{
    my $fn0 = shift;
    my $fn = RemoveCompressionExt $fn0;
    my $ret = 0;
    if ($fn0 =~ m/\.xz$/) {
        print "$fn0 -> $fn\n";
        $ret = system("xzcat $fn0 >$fn");
    } elsif ($fn0 =~ m/\.gz$/) {
        $ret = system("zcat $fn0 >$fn");
    } elsif ($fn0 =~ m/\.bz2$/) {
        $ret = system("bzcat $fn0 >$fn");
    } elsif ($fn0 =~ m/\.zstd$/) {
        $ret = system("zstdcat $fn0 >$fn");
    }
    $ret == 0 or die "Failed to unpack $fn0\n";
}

my $vietnam_nc = FindFile("data/netcdf", "vietnam.nc");
if ($vietnam_nc ne RemoveCompressionExt $vietnam_nc) {
    Unpack "data/netcdf/$vietnam_nc";
}

my $dir = $0;
$dir =~ s%[^/]*$%%;
if ($dir) { chdir "$dir" or die "Unable to change to $dir: $!" }

# Keep temporaries: useful to produce new result files
$keeptmp = "";
$cmp     = "";
while ( scalar @ARGV > 0 ) {
	if ( $ARGV[0] eq "keeptmp" ) {
		$keeptmp = "yes";
		print "Keeping temporary files.\n";
	}
	if ( $ARGV[0] eq "cmp" ) {
		$cmp = "yes";
		print "Using system cmp instead of qddifference.\n";
	}
	shift @ARGV;
}

@inputs = glob "data/netcdf/*.nc";
foreach my $input (@inputs) {
	my $output = $input;
	$output =~ s%^data/netcdf/%%;
	$output =~ s%[.]nc$%.sqd%;
	my $name = $output;
	$name =~ s%[.]sqd%%;
	if ( $input =~ m/(T[0-9]+)[.]/ ) {
		DoTest( "$name", "$output", "-U -" . $1 . " -c ../cnf/netcdf.conf $input" );
	}
	elsif ( $input =~ m/vietnam/ ) {
		DoTest( "$name", "$output", " -c conf/netcdf_vietnam.conf $input" );
	}
	elsif ( $input =~ m/aquamar/ ) {
		DoTest( "$name", "$output", " --zdim Z21_21 -c conf/netcdf_aquamar.conf $input" );
	}
	else {
		DoTest( "$name", "$output", "-c ../cnf/netcdf.conf $input" );
	}
}

DoTest( "vietnam_lev", "vietnam_lev.sqd", "-c conf/netcdf_vietnam.conf --zdim lev data/netcdf/vietnam.nc");
DoTest( "vietnam_soil", "vietnam_soil.sqd", "-c conf/netcdf_vietnam.conf --zdim lev_soil data/netcdf/vietnam.nc");
DoTest( "vietnam_topo", "vietnam_topo.sqd", "-c conf/netcdf_vietnam.conf --tdim '' data/netcdf/vietnam.nc");
DoTest( "merge", "merge.sqd", "-c ../cnf/netcdf.conf " . join( ' ', sort glob "data/netcdf/*.merge-nc" ) );
DoTest( "fixid", "fixid.sqd", "-m sm_uncertainty,15000 -c ../cnf/netcdf.conf data/netcdf/C3S-SOILMOISTURE-L3S-SSMV-PASSIVE-DAILY-20160831000000-TCDR-v201706.0.0.nc" );
DoTest( "unknownids", "unknownids.sqd", "-U -c ../cnf/netcdf.conf data/netcdf/C3S-SOILMOISTURE-L3S-SSMV-PASSIVE-DAILY-20160831000000-TCDR-v201706.0.0.nc" );

print "$errors errors\n";
exit($errors);


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest {
	my ( $text, $name, $arguments ) = @_;

	if ( exists( $usednames{$name} ) ) {
		print "Error: $name used more than once\n";
		exit(1);
	}
	$usednames{$name} = 1;

	my $resultfile;

            #"nctoqd_$name";

	if($wgs84)
	{
	    $resultfile = FindFile("results", "nctoqd_$name.wgs84");
	}

        if (! defined $resultfile)
        {
	    $resultfile = FindFile("results", "nctoqd_$name");
        }

	my ($tmpfile)    = "${resultfile}.tmp";
	$cmd = "$program $arguments $results/$tmpfile";
	if ( "$text" =~ m/^merge/ ) {
		$cmd = "$program -o results/$tmpfile $arguments";
	}

	$retcode = system("$cmd >results/$name.out 2>&1");
	if ( $retcode != 0 ) {
		system("tail -10 results/$name.out") ;
		print "Failed to run $cmd: $!";
		++$errors;
		return;
	}
	unlink("results/$name.out");

	print padname($text);

	if ( !-e "results/$tmpfile" ) {
	        ++$errors;
		print " FAILED TO PRODUCE OUTPUT FILE\n";
	}
	elsif ( ! defined $resultfile ) {
	        ++$errors;
		print " FAILED: TRUE RESULT MISSING\n";
		if ( !$keeptmp ) { unlink("$results/$tmpfile"); }
	}
	else {
		if ($cmp) {
			my $cmp     = `cmp results/$resultfile results/$tmpfile`;
			my $retcode = $?;
			if ( $retcode != 0 ) {
			        ++$errors;
				print $cmp ;
				print " FAILED!";
			}
			else {
				print " ok\n";
				if ( !$keeptmp ) { unlink("$results/$tmpfile"); }
			}
		}
		else {
			my ($difference) = `$qddifference results/$resultfile results/$tmpfile`;
			my $ret = $?;
			if ( $ret != 0 ) {
			        ++$errors;
				print " FAILED!\nqddifference says:\n$difference";
				print "( $resultfile <> $tmpfile in $results/ )\n";
			}
			else {
				$difference =~ s/^\s+//;
				$difference =~ s/\s+$//;

				if ( $difference < 0.0001 ) {
					if   ( $difference <= 0 ) { print " ok\n"; }
					else                      { print " ok (diff <= $difference)\n"; }

					# Test with qdinfo as well
					print padname($text);
					my $qdinfo1 = `$qdinfo -a -q $results/$resultfile > results/$resultfile.qdinfo`;
					my $ret1    = $?;
					if ( $ret1 != 0 ) {
					        ++$errors;
						print " FAILED!\nqdinfo failed on original result file\n";
					}
					else {
						my $qdinfo2 = `$qdinfo -a -q results/$tmpfile > results/$tmpfile.qdinfo`;
						my $ret2    = $?;
						if ( $ret2 != 0 ) {
						        ++$errors;
							print " FAILED!\nqdinfo failed on generated test file\n";
						}
						else {
							my $qddiff = `diff --unified results/$resultfile.qdinfo results/$tmpfile.qdinfo`;
							my $ret3   = $?;
							if ( $ret3 != 0 ) {
							        ++$errors;
								print " FAILED!\nquerydata header mismatch\n$qddiff";
							}
							else {
								print " metadata match ok\n";
								if ( !$keeptmp ) {
									unlink("$results/$tmpfile");
									unlink("$results/$resultfile.qdinfo");
									unlink("$results/$tmpfile.qdinfo");
								}
							}
						}
					}
				}
				else {
				        ++$errors;
					print " FAILED! (maxdiff = $difference)\n";
					print "( $resultfile <> $tmpfile in $results/ )\n";
				}
			}

		}
	}
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname {
	my ($str) = $_[0];

	while ( length($str) < 75 ) {
		$str .= ".";
	}
	return $str;
}

# ----------------------------------------------------------------------
