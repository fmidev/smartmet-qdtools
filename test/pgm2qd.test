#!/usr/bin/perl

$program = (-x "../pgm2qd" ? "../pgm2qd" : "pgm2qd");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
$wgs84 = 1-($? >> 8);

$results = "results";

$errors = 0;

%usednames = ();

sub FindFile($$)
{
    my $dir = shift;
    my $name = shift;
    my $result;
    if (-e "$dir/$name.xz") {
        $result="$name.xz";
    } elsif (-e "$dir/$name.bz2") {
        $result="$name.bz2"
    } elsif (-e "$dir/$name.gz") {
        $result="$name.gz"
    } elsif (-e "$dir/$name.zstd") {
        $result="$name.zstd"
    } elsif (-e "$dir/$name") {
        $result=$name;
    }
    return $result;
}

sub RemoveCompressionExt($)
{
    my $x = shift;
    $x =~ s/.(gz|bz2|xz|zstd)$//;
    return $x;
}

sub Unpack($)
{
    my $fn0 = shift;
    my $fn = RemoveCompressionExt $fn0;
    my $ret = 0;
    if ($fn0 =~ m/\.xz$/) {
        print "$fn0 -> $fn\n";
        $ret = system("xzcat $fn0 >$fn");
    } elsif ($fn0 =~ m/\.gz$/) {
        $ret = system("zcat $fn0 >$fn");
    } elsif ($fn0 =~ m/\.bz2$/) {
        $ret = system("bzcat $fn0 >$fn");
    } elsif ($fn0 =~ m/\.zstd$/) {
        $ret = system("zstdcat $fn0 >$fn");
    }
    $ret == 0 or die "Failed to unpack $fn0\n";
}

$resultfile = "201906071000_tutka_suomi_dbz.sqd";

DoTest("dbz","dbz","data/pgm",$resultfile);

print "$errors errors\n";
exit($errors);


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments,$resultfile) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    $cmd = "$program $arguments $results";

    my $expectedresult;
    if($wgs84)
    {
	$expectedresult = FindFile("results", "$resultfile.wgs84.ok");
    }

    if (! defined($expectedresult)) {
        $expectedresult = FindFile("results", "$resultfile.ok");
    }

    #print "$cmd\n";
    # $output = `$cmd 2>/dev/null`;
    $output = `$cmd`;

    print padname($text);

    if(! -e "results/$resultfile")
    {
	++$errors;
	print " FAILED TO PRODUCE OUTPUT FILE results/$resultfile\n";
    }
    elsif(! -e "results/$expectedresult")
    {
	++$errors;
	print " FAILED: TRUE RESULT results/$expectedresult MISSING\n";
	# unlink("$results/$resultfile");
    }
    else
    {
	my($difference) = `../qddifference results/$resultfile results/$expectedresult`;

	$difference =~ s/^\s+//;
	$difference =~ s/\s+$//;
	
	if($difference < 0.0001)
	{
	    if($difference <= 0)
	    { print " OK\n"; }
	    else
	    { print " OK (diff <= $difference)\n"; }
	    unlink("$results/$resultfile");
	}
	else
	{
	    ++$errors;
	    print " FAILED! (maxdiff = $difference)\n";
	    print "( $resultfile <> ${resultfile}.ok in $results/ )\n";
	}
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}
