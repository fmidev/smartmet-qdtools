#!/usr/bin/perl

$program = (-x "../qd2csv" ? "../qd2csv" : "qd2csv");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
$wgs84 = 1-($? >> 8);

$results = "results";

$errors = 0;

%usednames = ();

sub FindFile($$)
{
    my $dir = shift;
    my $name = shift;
    my $result;
    if (-e "$dir/$name.xz") {
        $result="$name.xz";
    } elsif (-e "$dir/$name.bz2") {
        $result="$name.bz2"
    } elsif (-e "$dir/$name.gz") {
        $result="$name.gz"
    } elsif (-e "$dir/$name.zstd") {
        $result="$name.zstd"
    } elsif (-e "$dir/$name") {
        $result=$name;
    }
    return $result;
}

sub RemoveCompressionExt($)
{
    my $x = shift;
    $x =~ s/.(gz|bz2|xz|zstd)$//;
    return $x;
}

DoTest("defaults", "defaults", "data/".FindFile("data", "pointdata.sqd"));

print "$errors errors\n";
exit($errors);


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile; # ) = "qd2csv_$name";

    if($wgs84)
    {
	$resultfile = FindFile("results", "qd2csv_$name.wgs84");
    }

    if (!defined($resultfile))
    {
	$resultfile = FindFile("results", "qd2csv_$name");
    }

    my $tmpfile = "results/".RemoveCompressionExt("$resultfile").".tmp";

    $cmd = "$program $arguments 2>$tmpfile.out";
    print "CMD: $cmd\n";
    my $ret = system("$cmd >$tmpfile 2>$tmpfile.stderr");
    $output = `$cmd`;

    print padname($text);
    if ($ret != 0)
    {
	++$errors;
        print " FAILED: return code $ret from gq2csv\n";
        system("cat $tmpfile.stderr");
    }
    elsif(equalcontent("$results/$resultfile",$output))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";

	open(OUT,">$results/$tmpfile")
	    or die "Could not open $results/$tmpfile for writing\n";
	print OUT $output;
	close(OUT);
    }

    unlink("$tmpfile.stderr") unless $ret != 0;
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file,$text) = @_;

    # File must exits

    if(!(-e $file))
    { return 0; }

    # Read binary file and compare results

    open(FILE,"$file");
    binmode(FILE);
    read(FILE,$buffer,(stat(FILE))[7]);
    close(FILE);
    return ($buffer eq $text);
}

# ----------------------------------------------------------------------
