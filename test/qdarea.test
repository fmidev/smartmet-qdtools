#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

$ENV{TZ} = "Europe/Helsinki";

my $program = (-x "../qdarea" ? "../qdarea" : "qdarea");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
my $wgs84 = 1-($? >> 8);

my $coordinatefile = "conf/coordinates.txt";
my $results = "results";

my $data = "data/".FindFile("data", "qdarea.sqd");

my $errors = 0;

my %usednames = ();

DoTest("-P mean(mean(t2m)) -p Helsinki",
       "mean_t2m_Helsinki",
       "-P 'mean(mean(t2m))' -p Helsinki");

DoTest("-P max(t2m),min(t2m) -p Helsinki",
       "min_max_t2m_Helsinki",
       "-P 'min(t2m),max(t2m)' -p Helsinki");

DoTest("-P mean(t2m) -p Helsinki:50",
       "mean_t2m_Helsinki_50",
       "-P 'mean(t2m)' -p Helsinki:50");

DoTest("-T 06-18 -P mean(t2m) -p Helsinki",
       "06_18_mean_t2m_Helsinki",
       "-T 06-18 -P 'mean(t2m)' -p Helsinki");

DoTest("-T 6:12 -P mean(t2m) -p Helsinki",
       "06_12_mean_t2m_Helsinki",
       "-T 06:12 -P 'mean(t2m)' -p Helsinki");

DoTest("-t UTC -P mean(t2m) -p Helsinki",
       "utc_mean_t2m_Helsinki",
       "-t UTC -P 'mean(t2m)' -p Helsinki");

DoTest("-t Europe/Stockholm -P mean(t2m) -p Helsinki",
       "stockholm_mean_t2m_Helsinki",
       "-t Europe/Stockholm -P 'mean(t2m)' -p Helsinki");

DoTest("-s -P mean(t2m),min(t2m),max(t2m) -p Helsinki",
       "php_mean_min_max_t2m_Helsinki",
       "-s -P 'mean(t2m),min(t2m),max(t2m)' -p Helsinki");

DoTest("-S tmean,tmin,tmax -P mean(t2m),min(t2m),max(t2m) -p Helsinki",
       "php_tmean_tmin_tmax_Helsinki",
       "-S tmean,tmin,tmax -P 'mean(t2m),min(t2m),max(t2m)' -p Helsinki");

DoTest("-E -P mean(t2m) -p Helsinki",
       "epoch_mean_t2m_Helsinki",
       "-E -P 'mean(t2m)' -p Helsinki");

DoTest("-P mean(mean(t2m)) -p Neverland",
       "mean_t2m_Neverland",
       "-P 'mean(mean(t2m))' -p Neverland");

DoTest("-P mean(t2m) -p Helsinki::Turku::Imatra",
       "mean_t2m_Helsinki_Turku_Imatra",
       "-P 'mean(t2m)' -p Helsinki::Turku::Imatra");

DoTest("-s -P mean(t2m) -p Helsinki::Turku::Imatra",
       "php_mean_t2m_Helsinki_Turku_Imatra",
       "-s -P 'mean(t2m)' -p Helsinki::Turku::Imatra");

DoTest("-P mean(t2m) -p 25,60",
       "mean_t2m_25_60",
       "-P 'mean(t2m)' -p 25,60");

DoTest("-T all -P mean(t2m) -p 25,60",
       "all_mean_t2m_25_60",
       "-T all -P 'mean(t2m)' -p 25,60");

DoTest("-T data -p 25,60:50 -P percentage[0.1:100](mean(rr1h))",
       "percentage_rain",
       "-T data -p 25,60:50 -P 'percentage[0.1:100](mean(rr1h))'");

print "$errors errors\n";
exit($errors);


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult("results", "qdarea_$name");
    my $tmpfile = RemoveCompressionExt("$resultfile").".tmp";

    my $cmd = "$program -c $coordinatefile $arguments -q $data";

    my $ret = system("$cmd >$tmpfile 2>$tmpfile.stderr");

    print padname($text);
    if ($ret != 0)
    {
	++$errors;
	print " FAILED: return code $ret from '$cmd'\n";
        CatFile "$tmpfile.stderr";
    }
    elsif (EqualFiles($resultfile, $tmpfile))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile )\n";
    }
}
