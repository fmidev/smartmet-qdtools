#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

$ENV{TZ} = "Europe/Helsinki";

my $program = (-x "../qdcrop" ? "../qdcrop" : "qdcrop");

my $results = "results";
my $data = "data/" . FindFile("data", "griddata.sqd");
my $pointdata = "data/" . FindFile("data", "pointdata.sqd");

my $errors = 0;

my %usednames = ();

# option -w

DoTest("option -w 2974,2944,2845 succeeds",
       "w_3_stations_succeeds",
       "-w 2974,2944,2845 $pointdata");

DoTest("option -w 2845-2944,2980 succeeds",
       "w_ok_ranges_succeeds",
       "-w 2845-2944,2980 $pointdata");

DoTest("option -W 0-2801,2836,2864-99999 succeeds",
       "W_discard_ranges_succeeds",
       "-W 0-2801,2836,2864-99999 $pointdata");

DoTest("option -w 2845-2944 -W 2900-2940 succeeds",
       "w_W_ranges_succeeds",
       "-w 2845-2944 -W 2900-2940 $pointdata");

# option -t

DoTest("option -i 18 succeeds",
       "i_18_succeeds",
       "-i 18 $data");

DoTest("option -I 18 succeeds",
       "iso_i_18_succeeds",
       "-I 18 $data");

DoTest("option -t 0,48 -i 18 succeeds",
       "t_0_48_i_18_succeeds",
       "-t 0,48 -i 18 $data");

DoTest("option -T 0,48 -I 18 succeeds",
       "iso_t_0_48_iso_i_18_succeeds",
       "-T 0,48 -I 18 $data");

DoTest("option -t 10 succeeds",
       "t_10_succeeds",
       "-t 10 $data");

DoTest("option -t 5,10 succeeds",
       "t_5_10_succeeds",
       "-t 5,10 $data");

DoTest("option -t 1,10,3 succeeds",
       "t_1_10_3_succeeds",
       "-t 1,10,3 $data");

DoTest("option -T 1,10,3 succeeds",
       "iso_t_1_10_3_succeeds",
       "-T 1,10,3 $data");

# option -p

DoTest("option -p Temperature,Precipitation1h succeeds",
       "p_succeeds",
       "-p Temperature,Precipitation1h $data");

# option -r

DoTest("option -r Temperature,TotalWindMS succeeds",
       "r_succeeds",
       "-r Temperature,TotalWindMS $data");

# option -A

DoTest("option -A DewPoint,Temperature succeeds",
       "a_succeeds",
       "-A DewPoint,Temperature $data");

DoTest("option -p Temperature -A DewPoint succeeds",
       "p_a_succeeds",
       "-p Temperature -A DewPoint $data");

# option -g

DoTest("option -g 10x20+5+15 succeeds",
       "g_pos_succeeds",
       "-g 10x20+5+15 $data");

DoTest("option -g 10x20-10-20 succeeds",
       "g_minus_succeeds",
       "-g 10x20-10-20 $data");

# option -G

DoTest("option -G 25,60,40,71 succeeds",
       "iso_g_succeeds",
       "-G 25,60,40,71 $data");

# option -d

DoTest("option -d 2x1 succeeds",
       "d_2_1_succeeds",
       "-d 2x1 $data");

DoTest("option -d 1x2 succeeds",
       "d_1_2_succeeds",
       "-d 1x2 $data");

DoTest("option -d 2x2 succeeds",
       "d_2_2_succeeds",
       "-d 2x2 $data");

# option -g and -d simultaneously

DoTest("option -g 10x10+10+10 -d 2x2 succeeds",
       "gd_succeeds",
       "-g 10x10+10+10 -d 2x2 $data");

# Option -S

DoTest("option -S succeeds",
       "iso_s_succeeds",
       "-S 200210111000,200210112000,200210120500 $data");

# Option -P

DoTest("option -P succeeds",
       "iso_p_succeeds",
       "-P latlon:20,60,40,70:50x50km $data");

# Option -m

DoTest("option -m 60 succeeds",
       "m_60_succeeds",
       "-m 60 $pointdata");

DoTest("option -m Temperature,60 succeeds",
       "m_temperature_60_succeeds",
       "-m Temperature,60 $pointdata");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult($results, "qdcrop_$name");
    my $tmpfile = RemoveCompressionExt("$resultfile").".tmp";

    my $cmd = "$program -V $arguments $tmpfile";
    #print "CMD='$cmd'\n";

    my $ret = system("$cmd 2>$tmpfile.stderr");

    print padname($text);

    if ($ret != 0)
    {
	++$errors;
        print " FAILED: return code $ret from gq2csv\n";
        CatFile "$tmpfile.stderr";
    }
    elsif (not defined($resultfile)) {
	++$errors;
        print " NO RESULT FILE\n";
    } elsif (CheckQuerydataEqual($resultfile, $tmpfile, 0.0001))
    {
	print " OK\n";
	unlink("$results/$tmpfile");
    }
    else
    {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile )\n";
    }
}
