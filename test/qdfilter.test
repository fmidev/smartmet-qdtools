#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../qdfilter" ? "../qdfilter" : "qdfilter");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
my $wgs84 = 1-($? >> 8);

my $results = "results";

my $griddata = "data/" . FindFile("data", "griddata.sqd");
my $pointdata = "data/" . FindFile("data", "pointdata.sqd");

my $errors = 0;

my %usednames = ();

my $PARAMS = "Temperature,WindSpeedMS,WindDirection";

# available functions

DoTest("min griddata 24h",
       "min_griddata",
       "-p $PARAMS 0 1440 min $griddata");

DoTest("max griddata 24h",
       "max_griddata",
       "-p $PARAMS 0 1440 max $griddata");

DoTest("mean griddata 24h",
       "mean_griddata",
       "-p $PARAMS 0 1440 mean $griddata");

DoTest("meanabs griddata 24h",
       "meanabs_griddata",
       "-p $PARAMS 0 1440 meanabs $griddata");

DoTest("sum griddata 24h",
       "sum_griddata",
       "-p $PARAMS 0 1440 sum $griddata");

DoTest("median griddata 24h",
       "median_griddata",
       "-p $PARAMS 0 1440 median $griddata");

DoTest("maxmean griddata 24h",
       "maxmean_griddata",
       "-p $PARAMS 0 1440 maxmean $griddata");

DoTest("min pointdata 24h",
       "min_pointdata",
       "-p $PARAMS 0 1440 min $pointdata");

DoTest("max pointdata 24h",
       "max_pointdata",
       "-p $PARAMS 0 1440 max $pointdata");

DoTest("mean pointdata 24h",
       "mean_pointdata",
       "-p $PARAMS 0 1440 mean $pointdata");

DoTest("meanabs pointdata 24h",
       "meanabs_pointdata",
       "-p $PARAMS 0 1440 meanabs $pointdata");

DoTest("sum pointdata 3h",
       "sum_pointdata",
       "-p $PARAMS 0 180 sum $pointdata");

DoTest("median pointdata 3h",
       "median_pointdata",
       "-p $PARAMS 0 180 median $pointdata");

DoTest("maxmean pointdata 3h",
       "maxmean_pointdata",
       "-p $PARAMS 0 180 maxmean $pointdata");

# Option -a

DoTest("sum griddata 24h -a",
       "sum_griddata_a",
       "-a -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 24h -a",
       "sum_pointdata_a",
       "-a -p $PARAMS 0 1440 sum $pointdata");

# Option -t

DoTest("sum griddata 24h -t 24,48",
       "sum_griddata_t_24_48",
       "-t 24,48 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -t -18,-6",
       "sum_pointdata_t_18_6",
       "-t -18,-6 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum griddata 24h -t 24,48,3",
       "sum_griddata_t_24_48_3",
       "-t 24,48,3 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -t -18,-6,3",
       "sum_pointdata_t_18_6_3",
       "-t -18,-6,3 -p $PARAMS 0 180 sum $pointdata");

# Option -T

DoTest("sum griddata 24h -T 24,48",
       "sum_griddata_T_24_48",
       "-T 24,48 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -T -18,-6",
       "sum_pointdata_T_18_6",
       "-T -18,-6 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum griddata 24h -T 24,48,3",
       "sum_griddata_T_24_48_3",
       "-T 24,48,3 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -T -18,-6,3",
       "sum_pointdata_T_18_6_3",
       "-T -18,-6,3 -p $PARAMS 0 180 sum $pointdata");

# Option -i

DoTest("sum griddata 24h -i 18",
       "sum_griddata_i_18",
       "-i 18 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -i 18",
       "sum_pointdata_i_18",
       "-i 18 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum griddata 24h -i 6,12,18",
       "sum_griddata_i_6_12_18",
       "-i 6,12,18 -p $PARAMS 0 1440 sum $griddata");

# Option -I

DoTest("sum griddata 24h -I 18",
       "sum_griddata_iso_i_18",
       "-I 18 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -I 18",
       "sum_pointdata_iso_i_18",
       "-I 18 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum pointdata 3h -I 6,12,18",
       "sum_pointdata_iso_i_5_12_18",
       "-I 6,12,18 -p $PARAMS 0 180 sum $pointdata");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult($results, "qdfilter_$name");
    my $tmpfile = RemoveCompressionExt(${resultfile}) . ".tmp";
    my $stderr_fn = RemoveCompressionExt(${resultfile}) . ".stderr";

    my $cmd = "$program $arguments >$tmpfile";

    my $ret = system("$cmd 2>$stderr_fn");

    print padname($text);

    if ($ret != 0)
    {
	++$errors;
        print " FAILED: return code $ret from '$cmd'\n";
        CatFile $stderr_fn;
    }
    else
    {
        my ($ok, $msg) = CheckQuerydataEqual($resultfile, $tmpfile, 0.0001);
        print " $msg\n";
        if (!$ok) {
            ++$errors;
        }
    }
}
