#!/usr/bin/perl

$program = (-x "../qdfilter" ? "../qdfilter" : "qdfilter");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
$wgs84 = 1-($? >> 8);

$results = "results";
$griddata = "data/griddata.sqd";
$pointdata = "data/pointdata.sqd";

%usednames = ();

$PARAMS = "Temperature,WindSpeedMS,WindDirection";

# available functions

DoTest("min griddata 24h",
       "min_griddata",
       "-p $PARAMS 0 1440 min $griddata");

DoTest("max griddata 24h",
       "max_griddata",
       "-p $PARAMS 0 1440 max $griddata");

DoTest("mean griddata 24h",
       "mean_griddata",
       "-p $PARAMS 0 1440 mean $griddata");

DoTest("meanabs griddata 24h",
       "meanabs_griddata",
       "-p $PARAMS 0 1440 meanabs $griddata");

DoTest("sum griddata 24h",
       "sum_griddata",
       "-p $PARAMS 0 1440 sum $griddata");

DoTest("median griddata 24h",
       "median_griddata",
       "-p $PARAMS 0 1440 median $griddata");

DoTest("maxmean griddata 24h",
       "maxmean_griddata",
       "-p $PARAMS 0 1440 maxmean $griddata");

DoTest("min pointdata 24h",
       "min_pointdata",
       "-p $PARAMS 0 1440 min $pointdata");

DoTest("max pointdata 24h",
       "max_pointdata",
       "-p $PARAMS 0 1440 max $pointdata");

DoTest("mean pointdata 24h",
       "mean_pointdata",
       "-p $PARAMS 0 1440 mean $pointdata");

DoTest("meanabs pointdata 24h",
       "meanabs_pointdata",
       "-p $PARAMS 0 1440 meanabs $pointdata");

DoTest("sum pointdata 3h",
       "sum_pointdata",
       "-p $PARAMS 0 180 sum $pointdata");

DoTest("median pointdata 3h",
       "median_pointdata",
       "-p $PARAMS 0 180 median $pointdata");

DoTest("maxmean pointdata 3h",
       "maxmean_pointdata",
       "-p $PARAMS 0 180 maxmean $pointdata");

# Option -a

DoTest("sum griddata 24h -a",
       "sum_griddata_a",
       "-a -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 24h -a",
       "sum_pointdata_a",
       "-a -p $PARAMS 0 1440 sum $pointdata");

# Option -t

DoTest("sum griddata 24h -t 24,48",
       "sum_griddata_t_24_48",
       "-t 24,48 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -t -18,-6",
       "sum_pointdata_t_18_6",
       "-t -18,-6 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum griddata 24h -t 24,48,3",
       "sum_griddata_t_24_48_3",
       "-t 24,48,3 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -t -18,-6,3",
       "sum_pointdata_t_18_6_3",
       "-t -18,-6,3 -p $PARAMS 0 180 sum $pointdata");

# Option -T

DoTest("sum griddata 24h -T 24,48",
       "sum_griddata_T_24_48",
       "-T 24,48 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -T -18,-6",
       "sum_pointdata_T_18_6",
       "-T -18,-6 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum griddata 24h -T 24,48,3",
       "sum_griddata_T_24_48_3",
       "-T 24,48,3 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -T -18,-6,3",
       "sum_pointdata_T_18_6_3",
       "-T -18,-6,3 -p $PARAMS 0 180 sum $pointdata");

# Option -i

DoTest("sum griddata 24h -i 18",
       "sum_griddata_i_18",
       "-i 18 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -i 18",
       "sum_pointdata_i_18",
       "-i 18 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum griddata 24h -i 6,12,18",
       "sum_griddata_i_6_12_18",
       "-i 6,12,18 -p $PARAMS 0 1440 sum $griddata");

# Option -I

DoTest("sum griddata 24h -I 18",
       "sum_griddata_iso_i_18",
       "-I 18 -p $PARAMS 0 1440 sum $griddata");

DoTest("sum pointdata 3h -I 18",
       "sum_pointdata_iso_i_18",
       "-I 18 -p $PARAMS 0 180 sum $pointdata");

DoTest("sum pointdata 3h -I 6,12,18",
       "sum_pointdata_iso_i_5_12_18",
       "-I 6,12,18 -p $PARAMS 0 180 sum $pointdata");


print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my($resultfile) = "qdfilter_$name";

    if($wgs84)
    {
	my($wgs84resultfile) = "${resultfile}.wgs84";
	if(-e "$results/$wgs84resultfile")
	{  $resultfile = $wgs84resultfile; }
    }

    my($tmpfile) = "${resultfile}.tmp";
    $cmd = "$program $arguments > $results/$tmpfile";
    # print("\n$cmd\n");

    $output = `$cmd`;

    print padname($text);

    my($difference) = `../qddifference results/$resultfile results/$tmpfile`;
    $difference =~ s/^\s+//;
    $difference =~ s/\s+$//;

    if(! -e "results/$resultfile")
    {
	print " FAILED! ($resultfile missing)\n";
    }
    elsif($difference < 0.0001)
    {
	if($difference == 0)
	{ print " OK\n"; }
	else
	{ print " OK (diff <= $difference)\n"; }
        unlink("results/$tmpfile");
    }
    else
    {
        print " FAILED! (maxdiff = $difference)\n";
        print "( $resultfile <> $tmpfile)\n";
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file1,$file2) = @_;

    # Files must exits

    if(!(-e $file1)) { return 0; }
    if(!(-e $file2)) { return 0; }

    # Read binary file and compare results

    open(FILE1,"$file1");
    binmode(FILE1);
    read(FILE1,$buffer1,(stat(FILE1))[7]);
    close(FILE1);

    open(FILE2,"$file2");
    binmode(FILE2);
    read(FILE2,$buffer2,(stat(FILE2))[7]);
    close(FILE2);

    return ($buffer1 eq $buffer2);
}

# ----------------------------------------------------------------------
