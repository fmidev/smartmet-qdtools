#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

$ENV{TZ} = "Europe/Helsinki";

my $program = (-x "../qdinfo" ? "../qdinfo" : "qdinfo");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
my $wgs84 = 1-($? >> 8);

my $results = "results";

my $griddata = "data/" . FindFile("data", "griddata.sqd");
my $pointdata = "data/" . FindFile("data", "pointdata.sqd");

my $errors = 0;

my %usednames = ();

# option -q

DoTest("option -q succeeds",
       "option_q_succeeds",
       "-q $pointdata");

DoTest("option -q fails",
       "option_q_fails",
       "-q foobar",
       "expected to fail");

# option -v

DoTest("option -v for point data",
       "option_v_point",
       "-v -q $pointdata");

# option -p

DoTest("option -p for point data",
       "option_p_point",
       "-p -q $pointdata");

DoTest("option -p for grid data",
       "option_p_grid",
       "-p -q $griddata");

# option -P

DoTest("option -P for point data",
       "option_capital_p_point",
       "-P -q $pointdata");

DoTest("option -P for grid data",
       "option_capital_p_grid",
       "-P -q $griddata");

# option -t

DoTest("option -t for point data",
       "option_t_point",
       "-t -q $pointdata");

DoTest("option -t for grid data",
       "option_t_grid",
       "-t -q $griddata");

DoTest("option -t formaatin kera",
       "option_t_format",
       "-t %A%Y%m%d%H%M%S -q $griddata");

# option -T

DoTest("option -T for point data",
       "option_capital_t_point",
       "-T -q $pointdata");

DoTest("option -T for grid data",
       "option_capital_t_grid",
       "-T -q $griddata");

DoTest("option -T formaatin kera",
       "option_capital_t_format",
       "-T %A%Y%m%d%H%M%S -q $griddata");

# option -z

DoTest("option -z for point data",
       "option_z_point",
       "-z -q $pointdata");

DoTest("option -z for grid data",
       "option_z_grid",
       "-z -q $griddata");

# option -r

DoTest("option -r for point data",
       "option_r_point",
       "-r -q $pointdata");

DoTest("option -r for grid data",
       "option_r_grid",
       "-r -q $griddata");

# option -x

DoTest("option -x for point data",
       "option_x_point",
       "-x -q $pointdata");

DoTest("option -x for grid data",
       "option_x_grid",
       "-x -q $griddata");

# option -X

DoTest("option -X for point data",
       "option_capital_x_point",
       "-X -q $pointdata");

DoTest("option -X for grid data",
       "option_capital_x_grid",
       "-X -q $griddata");

print "$errors errors\n";
exit($errors);
# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments,$expfail) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult($results, "qdinfo_$name");
    my $tmpfile = RemoveCompressionExt(${resultfile}) . ".tmp";
    my $stderr_fn = RemoveCompressionExt(${resultfile}) . ".stderr";

    my $cmd = "$program $arguments >$tmpfile 2>$stderr_fn";
    #print "CMD='$cmd'\n";

    my $ret = system($cmd);

    print padname($text);

    if (defined $expfail)
    {
        if ($ret == 0)
        {
            ++$errors;
            print " FAILED: command was expected to fail but it did not\n";
        }
        else
        {
            print " OK\n";
        }
    }
    elsif ($ret != 0)
    {
	++$errors;
        print " FAILED: return code $ret from '$cmd'\n";
        CatFile $stderr_fn;
    }
    elsif (EqualFiles($resultfile, $tmpfile))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile )\n";
    }
}
