#!/usr/bin/perl

$program = (-x "../qdinfo" ? "../qdinfo" : "qdinfo");

$results = "results";
$griddata = "data/griddata.sqd";
$pointdata = "data/pointdata.sqd";

%usednames = ();

# option -q

DoTest("option -q succeeds",
       "option_q_succeeds",
       "-q $pointdata");

DoTest("option -q fails",
       "option_q_fails",
       "-q foobar");

# option -v

DoTest("option -v for point data",
       "option_v_point",
       "-v -q $pointdata");

# option -p

DoTest("option -p for point data",
       "option_p_point",
       "-p -q $pointdata");

DoTest("option -p for grid data",
       "option_p_grid",
       "-p -q $griddata");

# option -P

DoTest("option -P for point data",
       "option_capital_p_point",
       "-P -q $pointdata");

DoTest("option -P for grid data",
       "option_capital_p_grid",
       "-P -q $griddata");

# option -t

DoTest("option -t for point data",
       "option_t_point",
       "-t -q $pointdata");

DoTest("option -t for grid data",
       "option_t_grid",
       "-t -q $griddata");

DoTest("option -t formaatin kera",
       "option_t_format",
       "-t %A%Y%m%d%H%M%S -q $griddata");

# option -T

DoTest("option -T for point data",
       "option_capital_t_point",
       "-T -q $pointdata");

DoTest("option -T for grid data",
       "option_capital_t_grid",
       "-T -q $griddata");

DoTest("option -T formaatin kera",
       "option_capital_t_format",
       "-T %A%Y%m%d%H%M%S -q $griddata");

# option -z

DoTest("option -z for point data",
       "option_z_point",
       "-z -q $pointdata");

DoTest("option -z for grid data",
       "option_z_grid",
       "-z -q $griddata");

# option -r

DoTest("option -r for point data",
       "option_r_point",
       "-r -q $pointdata");

DoTest("option -r for grid data",
       "option_r_grid",
       "-r -q $griddata");

# option -x

DoTest("option -x for point data",
       "option_x_point",
       "-x -q $pointdata");

DoTest("option -x for grid data",
       "option_x_grid",
       "-x -q $griddata");

# option -X

DoTest("option -X for point data",
       "option_capital_x_point",
       "-X -q $pointdata");

DoTest("option -X for grid data",
       "option_capital_x_grid",
       "-X -q $griddata");

print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my($resultfile) = "qdinfo_$name";
    my($tmpfile) = "${resultfile}.tmp";
    $cmd = "$program $arguments 2>&1";
    $output = `$cmd`;

    print padname($text);
    if(equalcontent("$results/$resultfile",$output))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";

	open(OUT,">$results/$tmpfile")
	    or die "Could not open $results/$tmpfile for writing\n";
	print OUT $output;
	close(OUT);
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file,$text) = @_;

    # File must exits

    if(!(-e $file))
    { return 0; }

    # Read binary file and compare results

    open(FILE,"$file");
    binmode(FILE);
    read(FILE,$buffer,(stat(FILE))[7]);
    close(FILE);
    return ($buffer eq $text);
}

# ----------------------------------------------------------------------
