#!/usr/bin/perl

$program = (-x "../qdmissing" ? "../qdmissing" : "qdmissing");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
$wgs84 = 1-($? >> 8);

$results = "results";
$griddata = "data/griddata.sqd";
$pointdata = "data/pointdata.sqd";
$synopdata = "data/synop.sqd";

%usednames = ();

# Without options

DoTest("pointdata without options",
       "pointdata",
       "$pointdata");

DoTest("griddata without options",
       "griddata",
       "$griddata");

DoTest("synopdata without options",
       "synopdata",
       "$synopdata");

# Option -n

DoTest("pointdata -n",
       "pointdata_n",
       "-n $pointdata");

DoTest("griddata -n",
       "griddata_n",
       "-n $griddata");

DoTest("synopdata -n",
       "synopdata_n",
       "-n $synopdata");

# Option -N

DoTest("pointdata -N",
       "pointdata_capital_n",
       "-N $pointdata");

DoTest("griddata -N",
       "griddata_capital_n",
       "-N $griddata");

DoTest("synopdata -N",
       "synopdata_capital_n",
       "-N $synopdata");

# Option -t

DoTest("pointdata -t",
       "pointdata_t",
       "-t $pointdata");

DoTest("griddata -t",
       "griddata_t",
       "-t $griddata");

DoTest("synopdata -t",
       "synopdata_t",
       "-t $synopdata");

# Option -T UTC

DoTest("pointdata -T UTC",
       "pointdata_T_UTC",
       "-T UTC $pointdata");

DoTest("griddata -T UTC",
       "griddata_T_UTC",
       "-T UTC $griddata");

DoTest("synopdata -T",
       "synopdata_T_UTC",
       "-T UTC $synopdata");

# Option -P

DoTest("pointdata -P Temperature,WindSpeedMS",
       "pointdata_P_Temperature_WindSpeedMS",
       "-P Temperature,WindSpeedMS $pointdata");

DoTest("griddata -P Temperature,WindSpeedMS",
       "griddata_P_Temperature_WindSpeedMS",
       "-P Temperature,WindSpeedMS $griddata");

DoTest("synopdata -P Temperature,WindSpeedMS",
       "synopdata_P_Temperature_WindSpeedMS",
       "-P Temperature,WindSpeedMS $synopdata");

# Option -w

DoTest("pointdata -w",
       "pointdata_w",
       "-w -P Temperature $pointdata");

DoTest("synopdata -w",
       "synopdata_w",
       "-w -P Temperature $synopdata");

# Options -w -Z

DoTest("pointdata -w -Z",
       "pointdata_w_z",
       "-w -Z -P Temperature $pointdata");

DoTest("synopdata -w -Z test",
       "synopdata_w_z",
       "-w -Z -P Temperature $synopdata");

# Several options

DoTest("pointdata several_options",
       "pointdata_several_options",
       "-P Temperature,WindSpeedMS -T Europe/Stockholm -N -t $pointdata");

DoTest("griddata several_options",
       "griddata_several_options",
       "-P Temperature,WindSpeedMS -T Europe/Stockholm -N -t $griddata");

DoTest("synopdata several_options",
       "synopdata_several_options",
       "-P Temperature,WindSpeedMS -T Europe/Stockholm -N -t $synopdata");


print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my($resultfile) = "qdmissing_$name";

    if($wgs84)
    {
	my($wgs84resultfile) = "${resultfile}.wgs84";
	if(-e "$results/$wgs84resultfile")
	{  $resultfile = $wgs84resultfile; }
    }

    my($tmpfile) = "${resultfile}.tmp";
    $cmd = "$program $arguments 2>&1";
    $output = `$cmd`;

    print padname($text);
    if(equalcontent("$results/$resultfile",$output))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";

	open(OUT,">$results/$tmpfile")
	    or die "Could not open $results/$tmpfile for writing\n";
	print OUT $output;
	close(OUT);
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file,$text) = @_;

    # File must exits

    if(!(-e $file))
    { return 0; }

    # Read binary file and compare results

    open(FILE,"$file");
    binmode(FILE);
    read(FILE,$buffer,(stat(FILE))[7]);
    close(FILE);
    return ($buffer eq $text);
}
