#!/usr/bin/perl

$program = (-x "../qdmissing" ? "../qdmissing" : "qdmissing");

$results = "results";

sub FindFile($$)
{
    my $dir = shift;
    my $name = shift;
    my $result;
    if (-e "$dir/$name.xz") {
        $result="$name.xz";
    } elsif (-e "$dir/$name.bz2") {
        $result="$name.bz2"
    } elsif (-e "$dir/$name.gz") {
        $result="$name.gz"
    } elsif (-e "$dir/$name.zstd") {
        $result="$name.zstd"
    } elsif (-e "$dir/$name") {
        $result=$name;
    }
    return $result;
}

sub RemoveCompressionExt($)
{
    my $x = shift;
    $x =~ s/.(gz|bz2|xz|zstd)$//;
    return $x;
}

sub CatCmd($)
{
    my $name = shift;
    my $result;
    if ($name =~ m/\.xz$/) {
        $result = "xzcat";
    } elsif ($name =~ m/\.bz2$/) {
        $result="bz2cat";
    } elsif ($name =~ m/\.gz$/) {
        $result="zcat.gz";
    } elsif ($name =~ m/\.zstd/) {
        $result="zstdcat";
    } else {
        $result="cat";
    }
    return $result;
}

$griddata = "data/" . FindFile("data", "griddata.sqd");
$pointdata = "data/" . FindFile("data", "pointdata.sqd");
$synopdata = "data/" . FindFile("data", "synop.sqd");

$errors = 0;

%usednames = ();

# Without options

DoTest("pointdata without options",
       "pointdata",
       "$pointdata");

DoTest("griddata without options",
       "griddata",
       "$griddata");

DoTest("synopdata without options",
       "synopdata",
       "$synopdata");

# Option -n

DoTest("pointdata -n",
       "pointdata_n",
       "-n $pointdata");

DoTest("griddata -n",
       "griddata_n",
       "-n $griddata");

DoTest("synopdata -n",
       "synopdata_n",
       "-n $synopdata");

# Option -N

DoTest("pointdata -N",
       "pointdata_capital_n",
       "-N $pointdata");

DoTest("griddata -N",
       "griddata_capital_n",
       "-N $griddata");

DoTest("synopdata -N",
       "synopdata_capital_n",
       "-N $synopdata");

# Option -t

DoTest("pointdata -t",
       "pointdata_t",
       "-t $pointdata");

DoTest("griddata -t",
       "griddata_t",
       "-t $griddata");

DoTest("synopdata -t",
       "synopdata_t",
       "-t $synopdata");

# Option -T UTC

DoTest("pointdata -T UTC",
       "pointdata_T_UTC",
       "-T UTC $pointdata");

DoTest("griddata -T UTC",
       "griddata_T_UTC",
       "-T UTC $griddata");

DoTest("synopdata -T",
       "synopdata_T_UTC",
       "-T UTC $synopdata");

# Option -P

DoTest("pointdata -P Temperature,WindSpeedMS",
       "pointdata_P_Temperature_WindSpeedMS",
       "-P Temperature,WindSpeedMS $pointdata");

DoTest("griddata -P Temperature,WindSpeedMS",
       "griddata_P_Temperature_WindSpeedMS",
       "-P Temperature,WindSpeedMS $griddata");

DoTest("synopdata -P Temperature,WindSpeedMS",
       "synopdata_P_Temperature_WindSpeedMS",
       "-P Temperature,WindSpeedMS $synopdata");

# Option -w

DoTest("pointdata -w",
       "pointdata_w",
       "-w -P Temperature $pointdata");

DoTest("synopdata -w",
       "synopdata_w",
       "-w -P Temperature $synopdata");

# Options -w -Z

DoTest("pointdata -w -Z",
       "pointdata_w_z",
       "-w -Z -P Temperature $pointdata");

DoTest("synopdata -w -Z test",
       "synopdata_w_z",
       "-w -Z -P Temperature $synopdata");

# Several options

DoTest("pointdata several_options",
       "pointdata_several_options",
       "-P Temperature,WindSpeedMS -T Europe/Stockholm -N -t $pointdata");

DoTest("griddata several_options",
       "griddata_several_options",
       "-P Temperature,WindSpeedMS -T Europe/Stockholm -N -t $griddata");

DoTest("synopdata several_options",
       "synopdata_several_options",
       "-P Temperature,WindSpeedMS -T Europe/Stockholm -N -t $synopdata");


print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile;

    $resultfile = FindFile($results, "qdmissing_$name");

    my $tmpfile = RemoveCompressionExt(${resultfile}) . ".tmp";

    $cmd = "$program $arguments";
    #$output = `$cmd`;

    my $ret = system("$cmd >$results/$tmpfile 2>&1");

    print padname($text);

    if ($ret != 0)
    {
	++$errors;
        print " FAILED: return code $ret from qdmissing\n";
    }
    elsif(system(CatCmd("$results/$resultfile") . " $results/$resultfile | cmp --quiet - $results/$tmpfile") == 0)
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = $_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}
