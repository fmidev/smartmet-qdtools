#!/usr/bin/perl

$program = (-x "../qdpoint" ? "../qdpoint" : "qdpoint");

$coordinatefile = "conf/coordinates.txt";
$results = "results";
$griddata = "data/griddata.sqd";
$pointdata = "data/pointdata.sqd";
$synopdata = "data/synop.sqd";

%usednames = ();


DoTest("default querydata works",
       "default_data",
       "-p Helsinki > /dev/null && echo works || echo does not work");

DoTest("poindata Helsinki",
       "piste_data_helsinki",
       "-p Helsinki -q $pointdata");

DoTest("griddata Helsinki",
       "hila_data_helsinki",
       "-p Helsinki -q $pointdata");

DoTest("pointdata Helsinki and Tampere",
       "piste_data_helsinki_tampere",
       "-p Helsinki,Tampere -q $pointdata");

DoTest("griddata Helsinki and Tampere",
       "hila_data_helsinki_tampere",
       "-p Helsinki,Tampere -q $griddata");

DoTest("pointdata Neverland",
       "piste_data_neverland",
       "-p Neverland -q $pointdata");

DoTest("locations with -l",
       "paikkakunnat_hki_tampere_turku",
       "-l data/asemalista.dat -q $griddata");

DoTest("pointdata -P Temperature",
       "lampotila_piste_data_helsinki",
       "-P Temperature -p Helsinki -q $pointdata");

DoTest("griddata -P Temperature",
       "lampotila_hila_data_helsinki",
       "-P Temperature -p Helsinki -q $griddata");

DoTest("pointdata -P Temeprature,Pressure",
       "lampotila_paine_piste_data_helsinki",
       "-P Temperature,Pressure -p Helsinki -q $pointdata");

DoTest("griddata -P Temperature,Pressure",
       "lampotila_paine_hila_data_helsinki",
       "-P Temperature,Pressure -p Helsinki -q $griddata");

DoTest("pointdata -x -y",
       "latlong_piste_data_helsinki",
       "-x 25 -y 60 -P Temperature -q $pointdata");

DoTest("griddata -x -y",
       "latlong_hila_data_helsinki",
       "-x 25 -y 60 -P Temperature -q $griddata");

DoTest("pointdata -n",
       "yksirivi_piste_data_helsinki",
       "-n -p Helsinki -q $pointdata");

DoTest("griddata -n",
       "yksirivi_hila_data_helsinki",
       "-n -p Helsinki -q $griddata");

DoTest("pointdata -n 3",
       "usearivi_piste_data_helsinki",
       "-n 3 -p Helsinki -q $pointdata");

DoTest("griddata -n 3",
       "usearivi_hila_data_helsinki",
       "-n 3 -p Helsinki -q $griddata");

DoTest("-w",
       "wmoasemat_piste",
       "-w -q $pointdata");

DoTest("-w -n",
       "wmoasemat_yksirivi_piste",
       "-w -n -q $pointdata");

DoTest("-w 2978",
       "wmoasema_kaisaniemi",
       "-w 2978 -q $pointdata");

DoTest("-w 2978,2974",
       "wmoasema_kaisaniemi_ja_vantaa",
       "-w 2978,2974 -q $pointdata");

DoTest("-s -w -n",
       "wmoasemat_luettelo",
       "-s -w -n -q $pointdata");

DoTest("-s -N 10",
       "wmoasemat_luettelo_lahimmat",
       "-s -N 10 -p Helsinki -q $pointdata");

DoTest("-s -N 1",
       "wmoasemat_luettelo_lahin",
       "-s -N 1 -p Helsinki -q $pointdata");

DoTest("default -d",
       "oletus_maksimietaisyys",
       "-p Helsinki -q $pointdata");

DoTest("-d 1",
       "pieni_maksimietaisyys",
       "-p Helsinki -d 1 -q $pointdata");

DoTest("-d 10",
       "iso_maksimietaisyys",
       "-p Helsinki -d 10 -q $pointdata");

DoTest("-P MetaIsDark Helsinki",
       "metaisdark_helsinki_piste",
       "-P MetaIsDark -p Helsinki -q $pointdata");

DoTest("-P MetaIsDark Utsjoki",
       "metaisdark_utsjoki_hila",
       "-P MetaIsDark -p Utsjoki -q $griddata");

DoTest("-P MetaN,MetaNN",
       "metan_metann_helsinki_hila",
       "-P TotalCloudCover,MiddleAndLowCloudCover,MetaN,MetaNN -p Helsinki -q $griddata");

DoTest("-P MetaSnowProb",
       "metasnowprob_helsinki_piste",
       "-P MetaSnowProb -p Helsinki -q $pointdata");

DoTest("-P MetaSurfaceRadiation",
       "metasurfaceradiation_helsinki_hila",
       "-P MetaSurfaceRadiation -p Helsinki -q $griddata");

DoTest("-P MetaThetaE",
       "metathetae_helsinki_piste",
       "-P Temperature,Pressure,Humidity,MetaThetaE -p Helsinki -q $pointdata");

DoTest("-q pointdata,griddata",
       "piste_hila_jarjestys",
       "-P Temperature -p Helsinki -q $pointdata,$hiladat");

DoTest("-q griddata,pointdata",
       "hila_piste_jarjestys",
       "-P Temperature -p Helsinki -q $griddata,$pointdata");

DoTest("-q pointdata,griddata -d 5",
       "piste_hila_jarjestys_etaisyys",
       "-d 5 -P Temperature -p Helsinki -q $pointdata,$griddata");

DoTest("-q griddata,pointdata -d 5",
       "hila_piste_jarjestys_etaisyys",
       "-d 5 -P Temperature -p Helsinki -q $griddata,$pointdata");

DoTest("-m NULL",
       "puuttuvien_korvaus",
       "-q $synopdata -w 2889 -m NULL");

DoTest("-i 60",
       "puuttuvien_interpolointi_60",
       "-q $synopdata -i 60 -w 2889 -P DewPoint");

DoTest("-i 120",
       "puuttuvien_interpolointi_120",
       "-q $synopdata -i 120 -w 2889 -P DewPoint");

DoTest("-i 180",
       "puuttuvien_interpolointi_180",
       "-q $synopdata -i 180 -w 2889 -P DewPoint");

DoTest("-N 5",
       "piste_N_lahinta",
       "-N 5 -P Temperature -p Helsinki -q $pointdata");

DoTest("-N 1",
       "piste_1_lahin",
       "-N 1 -P Temperature -p Helsinki -q $pointdata");

DoTest("-N 100 -d 20",
       "piste_N_lahinta_etaisyydella",
       "-N 100 -d 20 -P Temperature -p Helsinki -q $pointdata");

DoTest("-n 1 -p Helsinki,Turku -P MetaNorth -q",
       "north_Helsinki_Turku",
       "-n 1 -p Helsinki,Turku -P MetaNorth -q $griddata");

print "Done\n";

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my($resultfile) = "qdpoint_$name";
    my($tmpfile) = "${resultfile}.tmp";
    $cmd = "$program -c $coordinatefile $arguments 2>&1";
    $output = `$cmd`;

    print padname($text);
    if(equalcontent("$results/$resultfile",$output))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";

	open(OUT,">$results/$tmpfile")
	    or die "Could not open $results/$tmpfile for writing\n";
	print OUT $output;
	close(OUT);
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file,$text) = @_;

    # File must exits

    if(!(-e $file))
    { return 0; }

    # Read binary file and compare results

    open(FILE,"$file");
    binmode(FILE);
    read(FILE,$buffer,(stat(FILE))[7]);
    close(FILE);
    return ($buffer eq $text);
}
