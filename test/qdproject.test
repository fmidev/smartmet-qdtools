#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../qdproject" ? "../qdproject" : "qdproject");

my $results = "results";
my $griddata = "data/griddata.sqd";

MaybeUnpackFile("data", "griddata.sqd");

my $errors = 0;
my %usednames = ();

DoTest("option -d -L ", "option_d_big_l", "-d stereographic,20:6,51.3,49,70.2:600,-1 -L 25,60");
DoTest("option -q -L ", "option_q_big_l", "-q $griddata -L 25,60");
DoTest("option -l", "option_l", "-d stereographic,20:6,51.3,49,70.2:600,-1 -L 25,60");
DoTest("option -I", "option_big_i", "-d stereographic,20:6,51.3,49,70.2:600,-1 -I 277644.2057,-3173487.792");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult("results", "qdproject_$name");
    my $tmpfile = RemoveCompressionExt($resultfile) . ".tmp";

    my $cmd = "$program $arguments >$tmpfile 2>&1";
    #$output = `$cmd`;
    my $ret = system($cmd);

    print padname($text);
    if ($ret != 0) {
	++$errors;
        print " FAILED: return code $ret from '$cmd'\n";
    } elsif(EqualFiles($resultfile,$tmpfile)) {
	print " OK\n";
	#unlink($tmpfile);
    } else {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";
	system("diff $resultfile $tmpfile");
    }
}
