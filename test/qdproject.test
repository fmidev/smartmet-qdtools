#!/usr/bin/perl

$program = (-x "../qdproject" ? "../qdproject" : "qdproject");

system('grep --quiet "#define WGS84 1" /usr/include/smartmet/newbase/NFmiGlobals.h');
$wgs84 = 1-($? >> 8);

$results = "results";
$griddata = "data/griddata.sqd";

$errors = 0;

%usednames = ();

DoTest("option -d -L ", "option_d_big_l", "-d stereographic,20:6,51.3,49,70.2:600,-1 -L 25,60");
DoTest("option -q -L ", "option_q_big_l", "-q $griddata -L 25,60");
DoTest("option -l", "option_l", "-d stereographic,20:6,51.3,49,70.2:600,-1 -L 25,60");
DoTest("option -I", "option_big_i", "-d stereographic,20:6,51.3,49,70.2:600,-1 -I 277644.2057,-3173487.792");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my($resultfile) = "qdproject_$name";

    if($wgs84)
    {
	my($wgs84resultfile) = "${resultfile}.wgs84";
	if(-e "$results/$wgs84resultfile")
	{  $resultfile = $wgs84resultfile; }
    }

    my($tmpfile) = "${resultfile}.tmp";
    $cmd = "$program $arguments 2>&1";
    $output = `$cmd`;

    print padname($text);
    if(equalcontent("$results/$resultfile",$output))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";
	system("diff $results/$resultfile $results/$tmpfile");

	open(OUT,">$results/$tmpfile")
	    or die "Could not open $results/$tmpfile for writing\n";
	print OUT $output;
	close(OUT);
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file,$text) = @_;

    # File must exits

    if(!(-e $file))
    { return 0; }

    # Read binary file and compare results

    open(FILE,"$file");
    binmode(FILE);
    read(FILE,$buffer,(stat(FILE))[7]);
    close(FILE);
    return ($buffer eq $text);
}

# ----------------------------------------------------------------------
