#!/usr/bin/perl

use IO::Handle;
autoflush STDOUT 1;

$path = "..";

if(scalar(@ARGV) == 1)
{
    $path = shift @ARGV;
}
elsif(scalar(@ARGV) > 1)
{
    die "Error: Only one argument expected!\n";
}

# qdset

DoSqdTest("qdset name and id",
	  "cp data/pal_xh.sqd /tmp/qdset_palxh.sqd ; $path/qdset -n foobar -d 5 /tmp/qdset_palxh.sqd Temperature",
	  "qdset_palxh.sqd");


# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($title,$command,$dataname) = @_;

    my($resultfile) = "results/$dataname";
    my($tmpfile) = "/tmp/$dataname";
    print padname($title);
    system("$command");

    if(equalcontent($resultfile,$tmpfile))
    {
	print " OK\n";
	unlink($tmpfile);
    }
    else
    {
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile)\n";
    }
}

# ----------------------------------------------------------------------
# Run a single test, allowing for a small difference in sqd results
# ----------------------------------------------------------------------

sub DoSqdTest
{
    my($title,$command,$dataname) = @_;

    # Halutut tulokset ovat t‰‰ll‰

    my($resultfile) = "results/$dataname";

    # Saadut tulokset
    my($tmpfile) = "/tmp/$dataname";

    # Aja k‰sky
    
    print padname($title);
    system("$command");

    # Vertaa tuloksia

    my($difference) = `../qddifference $resultfile $tmpfile`;
    $difference =~ s/^\s+//;
    $difference =~ s/\s+$//;

    if($difference < 0.00001)
    {
	print " OK (diff <= $difference)\n";
	unlink($tmpfile);
    }
    else
    {
	print " FAILED! (maxdiff = $difference)\n";
	print "( $resultfile <> $tmpfile)\n";
    }
}

# ----------------------------------------------------------------------
# Pad the given string to 70 characters with dots
# ----------------------------------------------------------------------

sub padname
{
    my($str) = @_[0];

    while(length($str) < 70)
    {
	$str .= ".";
    }
    return $str;
}

# ----------------------------------------------------------------------
# Compare two files
# ----------------------------------------------------------------------

sub equalcontent
{
    my($file1,$file2) = @_;

    # Files must exits

    if(!(-e $file1))
    { return 0; }
    if(!(-e $file2))
    { return 0; }

    # Read binary files and compare results

    open(FILE1,$file1);
    binmode(FILE1);
    read(FILE1,$buffer1,(stat(FILE1))[7]);
    close(FILE1);

    open(FILE2,$file2);
    binmode(FILE2);
    read(FILE2,$buffer2,(stat(FILE2))[7]);
    close(FILE2);

    return ($buffer1 eq $buffer2);
}

# ----------------------------------------------------------------------
