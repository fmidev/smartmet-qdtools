#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../qdsounding" ? "../qdsounding" : "qdsounding");

my $coordinatefile = "conf/coordinates.txt";
my $results = "results";
my $data = "data/sounding.sqd";

MaybeUnpackFile("data", "sounding.sqd");

my $errors = 0;

my %usednames = ();

DoTest("option -P","option_big_p","-P Temperature,Pressure $data");
DoTest("option -w","option_w","-w 8023,8522 -P Temperature,Pressure $data");
DoTest("option -t","option_t","-t UTC -w 8023 -P Temperature,Pressure $data");
DoTest("option -z","option_z","-z -w 8023 -P Temperature,Pressure $data");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult($results, "qdsounding_$name");
    my $tmpfile = RemoveCompressionExt($resultfile) . ".tmp";
    my $cmd = "$program -c $coordinatefile $arguments >$tmpfile 2>&1";

    my $ret = system($cmd);

    print padname($text);

    if ($ret != 0) {
	++$errors;
        print " FAILED: return code $ret from '$cmd'\n";
    } elsif (EqualFiles($resultfile, $tmpfile)) {
	print " OK\n";
	#unlink($tmpfile);
    } else {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";
    }
}

# ----------------------------------------------------------------------
