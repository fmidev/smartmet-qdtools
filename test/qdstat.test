#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../qdstat" ? "../qdstat" : "qdstat");

my $results = "results";
my $griddata = "data/griddata.sqd";
my $pointdata = "data/pointdata.sqd";

my $errors = 0;

my %usednames = ();

MaybeUnpackFile("data", "griddata.sqd");
MaybeUnpackFile("data", "pointdata.sqd");

DoTest("default options", "default_options", "$griddata");
DoTest("option -T", "option_big_t", "-T $griddata");
DoTest("option -W", "option_big_w", "-W $pointdata");
DoTest("option -Z", "option_big_z", "-Z $griddata");
DoTest("option -d", "option_d", "-d $griddata");
DoTest("option -d -r", "option_d_r", "-d -r $griddata");
DoTest("option -d -b 5", "option_d_b_5", "-d -b 5 $griddata");
DoTest("option -d -b 10", "option_d_b_10", "-d -b 10 $griddata");
DoTest("option -d -B 80", "option_d_big_b_80", "-d -B 80 $griddata");
DoTest("option -p Temperature,WindSpeedMS", "option_p", "-p Temperature,WindSpeedMS $griddata");
DoTest("option -w 2974,2978", "option_w", "-w 2974,2978 $pointdata");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult($results, "qdstat_$name");
    my $tmpfile = RemoveCompressionExt($resultfile) . ".tmp";

    my $cmd = "$program $arguments >$tmpfile 2>&1";

    my $ret = system($cmd);

    print padname($text);

    if ($ret != 0) {
	++$errors;
        print " FAILED: return code $ret from '$cmd'\n";
    } elsif(EqualFiles("$resultfile", $tmpfile)) {
	print " OK\n";
	#unlink($tmpfile);
    } else {
	++$errors;
	print " FAILED!\n";
	print "( $resultfile <> $tmpfile in $results/ )\n";
    }
}

# ----------------------------------------------------------------------
