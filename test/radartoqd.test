#!/usr/bin/perl

use strict;
use warnings;
use lib ".";
use QDToolsTest;

my $program = (-x "../radartoqd" ? "../radartoqd" : "radartoqd");

my $results = "results";

my $errors = 0;

my %usednames = ();

DoTest("SYCJ dBZ linear","sycj.sqd","data/PAHM44_SYCJ_260630.bufr");
DoTest("TBPB dBZ linear","tbpb.sqd","data/PAHM44_TBPB_260500.bufr");
DoTest("MCWR dBZ scale","mcwr.sqd","data/PAHM44_MWCR_261000.bufr");
DoTest("SOCA dBZ scale overflow","soca.sqd","--allow-overflow --quiet data/PAHM44_SOCA_271827.bufr");

print "$errors errors\n";
exit($errors);

# ----------------------------------------------------------------------
# Run a single test
# ----------------------------------------------------------------------

sub DoTest
{
    my($text,$name,$arguments) = @_;

    if(exists($usednames{$name}))
    {
	print "Error: $name used more than once\n";
	exit(1);
    }
    $usednames{$name} = 1;

    my $resultfile = FindResult("results", "radartoqd_$name");
    my $tmpfile = RemoveCompressionExt(${resultfile}) . ".tmp";

    my $cmd = "$program $arguments $tmpfile";

    #print "$cmd\n";
    my $ret = system("$cmd >$tmpfile.out 2>&1");

    print padname($text);

    if ($ret != 0)
    {
	++$errors;
        print " FAILED: return code $ret from radartoqd\n";
        system("cat $tmpfile.out");
    }
    elsif (! -e "$tmpfile")
    {
	++$errors;
	print " FAILED TO PRODUCE OUTPUT FILE\n";
    }
    elsif(! -e "$resultfile")
    {
	++$errors;
	print " FAILED: TRUE RESULT $resultfile MISSING\n";
	unlink("$tmpfile");
    }
    else
    {
        my ($ok, $msg) = CheckQuerydataEqual($resultfile, $tmpfile, 0.00001);
        print " $msg\n";
        if (!$ok) {
            ++$errors;
        }
    }
}
